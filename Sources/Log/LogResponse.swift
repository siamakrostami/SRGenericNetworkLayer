import Foundation

class URLSessionLogger {
    // MARK: Lifecycle

    private init() {}

    // MARK: Internal

    static let shared = URLSessionLogger() // Singleton instance

    func logRequest(_ request: URLRequest) {
        print("\nðŸš€ðŸš€ðŸš€ REQUEST ðŸš€ðŸš€ðŸš€")
        print("ðŸ”ˆ \(request.httpMethod ?? "UNKNOWN") \(request.url?.absoluteString ?? "Invalid URL")")
        print("Headers:")
        request.allHTTPHeaderFields?.forEach { print("ðŸ’¡ \($0.key): \($0.value)") }
        if let body = request.httpBody, let bodyString = String(data: body, encoding: .utf8) {
            print("{\n  \(bodyString)\n}")
        }
        print("ðŸ”¼ðŸ”¼ðŸ”¼ END REQUEST ðŸ”¼ðŸ”¼ðŸ”¼")
    }

    func logResponse(_ response: URLResponse?, data: Data?, error: Error?) {
        if let httpResponse = response as? HTTPURLResponse {
            if 200 ..< 300 ~= httpResponse.statusCode {
                print("\nâœ…âœ…âœ… SUCCESS RESPONSE âœ…âœ…âœ…")
                print("ðŸ”ˆ \(httpResponse.url?.absoluteString ?? "Invalid URL")")
                print("ðŸ”ˆ Status code: \(httpResponse.statusCode)")
                print("Headers:")
                httpResponse.allHeaderFields.forEach { print("ðŸ’¡ \($0.key): \($0.value)") }
                if let data = data, let responseBody = String(data: data, encoding: .utf8) {
                    print("{\n  \(responseBody)\n}")
                }
                print("ðŸ”¼ðŸ”¼ðŸ”¼ END SUCCESS RESPONSE ðŸ”¼ðŸ”¼ðŸ”¼")
            } else {
                print("\nðŸ›‘ðŸ›‘ðŸ›‘ REQUEST ERROR ðŸ›‘ðŸ›‘ðŸ›‘")
                print("ðŸ”ˆ \(httpResponse.url?.absoluteString ?? "Invalid URL")")
                print("ðŸ”ˆ Status code: \(httpResponse.statusCode)")
                print("Headers:")
                httpResponse.allHeaderFields.forEach { print("ðŸ’¡ \($0.key): \($0.value)") }
                if let data = data, let responseBody = String(data: data, encoding: .utf8) {
                    print("{\n  \(responseBody)\n}")
                }
                print("ðŸ”ˆ \(String(describing: error?.localizedDescription))")
                print("ðŸ”¼ðŸ”¼ðŸ”¼ END REQUEST ERROR ðŸ”¼ðŸ”¼ðŸ”¼")
            }

        } else if let error = error {
            print("\nðŸ›‘ðŸ›‘ðŸ›‘ REQUEST ERROR ðŸ›‘ðŸ›‘ðŸ›‘")
            print("ðŸ”ˆ \(error.localizedDescription)")
            print("ðŸ”¼ðŸ”¼ðŸ”¼ END REQUEST ERROR ðŸ”¼ðŸ”¼ðŸ”¼")
        }
    }
}
